The section:
--> The ones that didn't were "near misses". Here's an example: trTCM. Why did trTCM not work?
--> But the near miss suggests a path to designing a universal instruction set.
--> if (g1) f1 ... if(g2) f2 ... and so on
--> What is the optimal stateful instruction set? 
--> Distinguish computational capabilities of a pipeline from information not
being available. For instance, RED needs queue depth that is not available, but
the EWMA operation itself is rather straightforward.
2.0. Worth pointing out that many of these algorithms (HashPipe and sketches are exceptions) were never intended for a hardware router and would probably be written differently now that programmable high-speed routers are actually possible.
-----------

However, after this process was over, we
only had to add a multiply-accumulate atom (reqd. for performance queries). In
hindsight, this was a simple enough instruction that we should have added to
the original instruction set, but did not simply because there was no way to
implement the primary use case for a MAC (the RED algorithm) without getting
queue size information in the enqueue pipeline.
