1. router_arch.tex

Consider having a separate section titled primer or experimental setup or
arch. of a router?  This could cover:
--> Why pipeline instead of shared memory? There's an interesting point here.
--> a shared pipeline shared across multiple ports,
--> maybe multiple such pipelines and
--> the scheduler that resides in between the two pipelines.
--> the Banzai machine model
--> differences between single vs. multi-pipeline routers,
--> where the router's control plane sits relative to this pipeline
--> i.e., spend a decent amount of time explaining the machine model: packets come in,
they are looked up, we carry out some action, and so on so forth.
--> why we used simulation, synthesis, emulation

Basically, I think the experimental method has a substantial amount of new content as well.
Also, we should probably talk about where each of our three
pieces fits within the context of a router ASIC or router chip.

2. generalizability.txt

3. Proof and explanation of fixed-point algorithm in Marple. Explain compiler
in Marple more clearly.

4. Make an e2e pass, especially from Chapters 3, 4, and 5, address nits.txt

5. Add a multiply-accumulate atom to the Domino set. The only reason we
didn't add it to the original Domino paper was because queue size information
for RED was not available at enqueue. We knew of it all the way back to the
2013 HotNets paper.

6. Distinguish computational capabilities of a pipeline from information not
being available. For instance, RED needs queue depth that is not available, but
the EWMA operation itself is rather straightforward.

7. Killer app for programmability: Measurement maybe?

8. What are the abstraction disadvantages to determining the packet's priority
at the enqueue? Correspondingly, what are the implementation advantages to
determining the packet's priority at the enqueue?

9. consider replacing line rate with high speed or something more meaningful
